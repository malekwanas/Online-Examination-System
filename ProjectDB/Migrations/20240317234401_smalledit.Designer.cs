// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectDB.Models;

#nullable disable

namespace ProjectDB.Migrations
{
    [DbContext(typeof(ProjectDBContext))]
    [Migration("20240317234401_smalledit")]
    partial class smalledit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DepartmentsITIBranches", b =>
                {
                    b.Property<int>("DepartmentsDeptID")
                        .HasColumnType("int");

                    b.Property<int>("ITIBranchesBranchID")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsDeptID", "ITIBranchesBranchID");

                    b.HasIndex("ITIBranchesBranchID");

                    b.ToTable("DepartmentsITIBranches");
                });

            modelBuilder.Entity("DepartmentsInstructors", b =>
                {
                    b.Property<int>("DepartmentsDeptID")
                        .HasColumnType("int");

                    b.Property<int>("InstructorsInsID")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsDeptID", "InstructorsInsID");

                    b.HasIndex("InstructorsInsID");

                    b.ToTable("DepartmentsInstructors");
                });

            modelBuilder.Entity("ProjectDB.Models.Choices", b =>
                {
                    b.Property<int>("Choice_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Choice_ID"));

                    b.Property<string>("Choice1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choice2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choice3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Q_ID")
                        .HasColumnType("int");

                    b.HasKey("Choice_ID");

                    b.HasIndex("Q_ID")
                        .IsUnique();

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("ProjectDB.Models.Course_Topics", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Topics")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseID", "Topics");

                    b.ToTable("Course_Topics");
                });

            modelBuilder.Entity("ProjectDB.Models.Courses", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ins_ID")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("Ins_ID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("ProjectDB.Models.Departments", b =>
                {
                    b.Property<int>("DeptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptID"));

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeptID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ProjectDB.Models.ExamQuestionResponse", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<string>("StudentResponse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID", "QuestionID", "ExamID");

                    b.HasIndex("ExamID");

                    b.HasIndex("QuestionID");

                    b.ToTable("examQuestionResponses");
                });

            modelBuilder.Entity("ProjectDB.Models.Exams", b =>
                {
                    b.Property<int>("ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamID"));

                    b.Property<int>("CrsID")
                        .HasColumnType("int");

                    b.Property<int>("Total_Marks")
                        .HasColumnType("int");

                    b.HasKey("ExamID");

                    b.HasIndex("CrsID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ProjectDB.Models.ITIBranches", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchID"));

                    b.Property<string>("Branch_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchID");

                    b.ToTable("ITIBranches");
                });

            modelBuilder.Entity("ProjectDB.Models.Instructors", b =>
                {
                    b.Property<int>("InsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsID"));

                    b.Property<string>("Ins_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ins_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsID");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("ProjectDB.Models.Questions", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<int>("CrsID")
                        .HasColumnType("int");

                    b.Property<string>("Question_Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionID");

                    b.HasIndex("CrsID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ProjectDB.Models.Student_Courses", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("Student_Grade")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("Student_Courses");
                });

            modelBuilder.Entity("ProjectDB.Models.Students", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<int>("Dept_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Student_BD")
                        .HasColumnType("datetime2");

                    b.Property<string>("Student_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StudentID");

                    b.HasIndex("Dept_ID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("DepartmentsITIBranches", b =>
                {
                    b.HasOne("ProjectDB.Models.Departments", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsDeptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDB.Models.ITIBranches", null)
                        .WithMany()
                        .HasForeignKey("ITIBranchesBranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentsInstructors", b =>
                {
                    b.HasOne("ProjectDB.Models.Departments", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsDeptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDB.Models.Instructors", null)
                        .WithMany()
                        .HasForeignKey("InstructorsInsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectDB.Models.Choices", b =>
                {
                    b.HasOne("ProjectDB.Models.Questions", "Question")
                        .WithOne("Choices")
                        .HasForeignKey("ProjectDB.Models.Choices", "Q_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ProjectDB.Models.Course_Topics", b =>
                {
                    b.HasOne("ProjectDB.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ProjectDB.Models.Courses", b =>
                {
                    b.HasOne("ProjectDB.Models.Instructors", "Instructors")
                        .WithMany()
                        .HasForeignKey("Ins_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructors");
                });

            modelBuilder.Entity("ProjectDB.Models.ExamQuestionResponse", b =>
                {
                    b.HasOne("ProjectDB.Models.Exams", "Exams")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDB.Models.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDB.Models.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exams");

                    b.Navigation("Questions");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ProjectDB.Models.Exams", b =>
                {
                    b.HasOne("ProjectDB.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CrsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ProjectDB.Models.Questions", b =>
                {
                    b.HasOne("ProjectDB.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CrsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ProjectDB.Models.Student_Courses", b =>
                {
                    b.HasOne("ProjectDB.Models.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDB.Models.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ProjectDB.Models.Students", b =>
                {
                    b.HasOne("ProjectDB.Models.Departments", "departments")
                        .WithMany()
                        .HasForeignKey("Dept_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("departments");
                });

            modelBuilder.Entity("ProjectDB.Models.Questions", b =>
                {
                    b.Navigation("Choices")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
